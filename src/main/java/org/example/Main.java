// src/main/java/dio/padroes/projeto/Main.java
package dio.padroes.projeto;

import java.util.Scanner;

import dio.padroes.projeto.facade.Facade;
import dio.padroes.projeto.singleton.SingletonEager;
import dio.padroes.projeto.singleton.SingletonLazy;
import dio.padroes.projeto.singleton.SingletonLazyHolder;
import dio.padroes.projeto.strategy.Comportamento;
import dio.padroes.projeto.strategy.ComportamentoAgressivo;
import dio.padroes.projeto.strategy.ComportamentoDefensivo;
import dio.padroes.projeto.strategy.ComportamentoNormal;
import dio.padroes.projeto.strategy.Robo;

/**
 * Classe Main - Ponto de entrada principal da aplica√ß√£o
 * Demonstra todos os padr√µes de projeto implementados com menu interativo
 */
public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int opcao;

        do {
            System.out.println("\n" + "=".repeat(50));
            System.out.println("    DEMONSTRA√á√ÉO DOS PADR√ïES DE PROJETO");
            System.out.println("=".repeat(50));
            System.out.println("1 - Demonstrar Padr√£o Singleton");
            System.out.println("2 - Demonstrar Padr√£o Strategy");
            System.out.println("3 - Demonstrar Padr√£o Facade");
            System.out.println("4 - Executar todos os padr√µes");
            System.out.println("0 - Sair");
            System.out.println("=".repeat(50));
            System.out.print("Escolha uma op√ß√£o: ");

            opcao = scanner.nextInt();

            switch (opcao) {
                case 1:
                    demonstrarSingleton();
                    break;
                case 2:
                    demonstrarStrategy();
                    break;
                case 3:
                    demonstrarFacade();
                    break;
                case 4:
                    executarTodosOsPadroes();
                    break;
                case 0:
                    System.out.println("Saindo...");
                    break;
                default:
                    System.out.println("Op√ß√£o inv√°lida!");
            }

            if (opcao != 0) {
                System.out.println("\nPressione Enter para continuar...");
                scanner.nextLine(); // Consumir quebra de linha
                scanner.nextLine(); // Aguardar Enter
            }

        } while (opcao != 0);

        scanner.close();
    }

    /**
     * Demonstra o funcionamento do padr√£o Singleton
     */
    private static void demonstrarSingleton() {
        System.out.println("\n" + "=".repeat(40));
        System.out.println("DEMONSTRA√á√ÉO DO PADR√ÉO SINGLETON");
        System.out.println("=".repeat(40));

        System.out.println("\n1. Singleton Lazy (Cria√ß√£o sob demanda):");
        SingletonLazy lazy1 = SingletonLazy.getInstancia();
        SingletonLazy lazy2 = SingletonLazy.getInstancia();
        System.out.println("   Inst√¢ncia 1: " + lazy1.hashCode());
        System.out.println("   Inst√¢ncia 2: " + lazy2.hashCode());
        System.out.println("   S√£o iguais? " + (lazy1 == lazy2));

        System.out.println("\n2. Singleton Eager (Cria√ß√£o na inicializa√ß√£o):");
        SingletonEager eager1 = SingletonEager.getInstancia();
        SingletonEager eager2 = SingletonEager.getInstancia();
        System.out.println("   Inst√¢ncia 1: " + eager1.hashCode());
        System.out.println("   Inst√¢ncia 2: " + eager2.hashCode());
        System.out.println("   S√£o iguais? " + (eager1 == eager2));

        System.out.println("\n3. Singleton LazyHolder (Thread-safe):");
        SingletonLazyHolder holder1 = SingletonLazyHolder.getInstancia();
        SingletonLazyHolder holder2 = SingletonLazyHolder.getInstancia();
        System.out.println("   Inst√¢ncia 1: " + holder1.hashCode());
        System.out.println("   Inst√¢ncia 2: " + holder2.hashCode());
        System.out.println("   S√£o iguais? " + (holder1 == holder2));

        System.out.println("\n‚úÖ Padr√£o Singleton: Garante uma √∫nica inst√¢ncia por classe!");
    }

    /**
     * Demonstra o funcionamento do padr√£o Strategy
     */
    private static void demonstrarStrategy() {
        System.out.println("\n" + "=".repeat(40));
        System.out.println("DEMONSTRA√á√ÉO DO PADR√ÉO STRATEGY");
        System.out.println("=".repeat(40));

        System.out.println("\nCriando um rob√¥ que pode alterar seu comportamento:");

        Comportamento normal = new ComportamentoNormal();
        Comportamento defensivo = new ComportamentoDefensivo();
        Comportamento agressivo = new ComportamentoAgressivo();

        Robo robo = new Robo();

        System.out.println("\n1. Definindo comportamento NORMAL:");
        robo.setComportamento(normal);
        robo.mover();

        System.out.println("\n2. Alterando para comportamento DEFENSIVO:");
        robo.setComportamento(defensivo);
        robo.mover();

        System.out.println("\n3. Alterando para comportamento AGRESSIVO:");
        robo.setComportamento(agressivo);
        robo.mover();

        System.out.println("\n‚úÖ Padr√£o Strategy: Permite alterar algoritmos em tempo de execu√ß√£o!");
    }

    /**
     * Demonstra o funcionamento do padr√£o Facade
     */
    private static void demonstrarFacade() {
        System.out.println("\n" + "=".repeat(40));
        System.out.println("DEMONSTRA√á√ÉO DO PADR√ÉO FACADE");
        System.out.println("=".repeat(40));

        System.out.println("\nSem o padr√£o Facade, seria necess√°rio:");
        System.out.println("1. Consultar API de CEP para obter cidade e estado");
        System.out.println("2. Integrar com sistema CRM para salvar cliente");
        System.out.println("3. Coordenar essas opera√ß√µes manualmente");

        System.out.println("\nCom o padr√£o Facade, basta uma chamada:");

        Facade facade = new Facade();

        System.out.println("\n‚Üí Migrando cliente 'Jo√£o Silva':");
        facade.migrarCliente("Jo√£o Silva", "14801788");

        System.out.println("\n‚Üí Migrando cliente 'Maria Santos':");
        facade.migrarCliente("Maria Santos", "01234567");

        System.out.println("\n‚úÖ Padr√£o Facade: Simplifica interfaces complexas!");
    }

    /**
     * Executa demonstra√ß√£o de todos os padr√µes sequencialmente
     */
    private static void executarTodosOsPadroes() {
        demonstrarSingleton();
        demonstrarStrategy();
        demonstrarFacade();

        System.out.println("\n" + "=".repeat(50));
        System.out.println("üéâ DEMONSTRA√á√ÉO COMPLETA DOS PADR√ïES CONCLU√çDA!");
        System.out.println("=".repeat(50));
    }
}